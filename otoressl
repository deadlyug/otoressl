#!/bin/bash
# Change directory to directory of the script

PARAMS=""
while (( "$#" )); do
  case "$1" in
    --no-dbcreds)
      shift
      ;;
    nginx)
      WEB_SERVER="nginx"
      shift
      ;;
    apache)
      WEB_SERVER="apache"
      shift
      ;;
    -f|--disable-firewall)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        FIREWALL=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -v|--version)
      echo "otoressl version 1.0.2"
      exit 0
      ;;
    -w|--restart-webmin)
      RESTART_WEBMIN=true
      shift 
      ;;
    -y)
      SKIP_CONFIRMATION=true
      shift 
      ;;
    -h | --help ) 
         echo "Usage: otoressl <web-server> [OPTIONS]"
         echo "WEB-SERVER includes: "
         echo "   nginx   - if server use nginx"
         echo "   apache  - if server use apache"
         echo "OPTION includes:"
         echo "   -f | --disable-firewall - insert firewall tools to disable"
         echo "   ARGUMENT includes:"
         echo "       iptables - if server use iptables"
         echo "       firewalld - if server use firewalld"
         echo "   -v - show otoressl version"
         echo "   -w | --restart-webmin - restart webmin after renew"
         echo "   -y - skip confirmation"
         echo "   -h | --help - displays this message"
         exit 0
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    * ) 
         echo "-----"
         echo "Error"
         echo "Invalid <web-server>: $1"
         echo "you must specify web server service to tell script to auto restart web server that you have been chosen.."
         echo "--------------------------------------"
         echo "Usage: otoressl <web-server> [OPTIONS]"
         echo "example: ./otoressl nginx or ./otoressl apache [OPTIONS]"
         echo "WEB-SERVER includes: "
         echo "   nginx   - if server use nginx"
         echo "   apache  - if server use apache"
         echo "OPTION includes:"
         echo "   -f | --disable-firewall - insert firewall tools to disable"
         echo "   ARGUMENT includes:"
         echo "       iptables - if server use iptables"
         echo "       firewalld - if server use firewalld"
         echo "   -v - show otoressl version"
         echo "   -w | --restart-webmin - restart webmin after renew"
         echo "   -y - skip confirmation"
         echo "   -h | --help - displays this message"
         exit 1
     ;;
    # *) # preserve positional arguments
    #   PARAMS="$PARAMS $1"
    #   shift
    #   ;;
  esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

# cd to script directory
cd "$(dirname "$0")"

OS=$(hostnamectl | grep "Operating System" | awk '{print $3}')
certbot=$(if ! which certbot; then which certbot-auto; fi )

if [[ $WEB_SERVER != "nginx" ]]; then
  if [[ $WEB_SERVER != "apache" ]]; then
    echo "-----"
    echo "Error"
    echo "you must specify web server service to tell script to auto restart web server that you have been chosen.."
    echo "--------------------------------------"
    echo "Usage: otoressl <web-server> [OPTIONS]"
    echo "example: ./otoressl nginx or ./otoressl apache [OPTIONS]"
    echo "WEB-SERVER includes: "
    echo "   nginx   - if server use nginx"
    echo "   apache  - if server use apache"
    echo "OPTION includes:"
    echo "   -f | --disable-firewall - insert firewall tools to disable"
    echo "   ARGUMENT includes:"
    echo "       iptables - if server use iptables"
    echo "       firewalld - if server use firewalld"
    echo "   -v - show otoressl version"
    echo "   -w | --restart-webmin - restart webmin after renew"
    echo "   -y - skip confirmation"
    echo "   -h | --help - displays this message"
    exit 1
  fi
fi

function restartNginx() {
  if ! systemctl restart nginx; then
    echo "-------------------------"
    echo "Failed to restart nginx.."
    echo "Maybe apache is running and use the same port with nginx"
    echo "Try to stop apache.."
    if systemctl status httpd; then
      if systemctl stop httpd; then
        if ! systemctl restart nginx; then
          "apache has been stop but nginx still cannot start, maybe something were wrong with nginx configuration.. "
          if systemctl start httpd; then
            "Success restart apache.."
          fi
          exit 1
        fi
      fi
     else
    "cannot stop apache, maybe the service already stop. it makes maybe there's a error with you nginx configuration.."
    fi
  else
    echo "Success restart nginx.."
  fi
}
function restartApache() {
  if ! systemctl restart apache2; then
    echo "----"
    echo "Failed to restart apache.."
    echo "Maybe nginx is running and use the same port with apache"
    echo "Try to stop nginx.."
    if systemctl status nginx; then
      if systemctl stop nginx; then
        if ! systemctl restart apache2; then
          "nginx has been stop but apache still cannot start, maybe something were wrong with apache configuration.. "
          if systemctl start nginx; then
            "Success restart nginx.."
          fi
          exit 1
        fi
      fi
     else
    "cannot stop nginx, maybe the service already stop. it makes maybe there's a error with you apache configuration.."
    fi
  else
    echo "Success restart apache.."
  fi
}

function startFirewall() {

case $OS in
  "CentOS")
    if [[ $FIREWALL != "" ]]; then
      case $FIREWALL in
        "iptables")
          echo "-------------------------------"
          echo "mengaktifkan kembali firewall.."
          if systemctl start iptables; then
            echo "berhasil mengaktifkan firewall.."
          fi
          ;;
        "firewalld")
          echo "-------------------------------"
          echo "mengaktifkan kembali firewall.."
          if systemctl start firewalld; then
            echo "berhasil mengaktifkan firewall.."
          fi
          ;;
      esac
    fi
    ;;
  *)
    if [[ $FIREWALL != "" ]]; then
      case $FIREWALL in
        "iptables")
          if [[ ! -d /etc/sysconfig ]]; then
            mkdir /etc/sysconfig
          fi
          echo "--------------------------"
          echo "mengaktifkan firewall.."
          if iptables-restore < /etc/sysconfig/iptables; then
            echo "berhasil mengaktifkan firewall.."
          fi
          ;;
        "firewalld")
          echo "--------------------------"
          echo "mengaktifkan firewall.."
          if systemctl start firewalld; then
            echo "berhasil mengaktifkan firewall.."
          fi
          ;;
      esac
    fi
    ;;
esac

}

function stopFirewall() {
  case $OS in
    "CentOS")
      if [[ $FIREWALL != "" ]]; then
        case $FIREWALL in
          "iptables")
            echo "--------------------------"
            echo "menon-aktifkan firewall.."
            if systemctl stop iptables; then
              echo "berhasil menon-aktifkan firewall.."
            fi
            ;;
          "firewalld")
            echo "--------------------------"
            echo "menon-aktifkan firewall.."
            if systemctl stop firewalld; then
              echo "berhasil menon-aktifkan firewall.."
            fi
            ;;
        esac
      fi
      ;;
    *)
      if [[ $FIREWALL != "" ]]; then
        case $FIREWALL in
          "iptables")
            if [[ ! -d /etc/sysconfig ]]; then
              mkdir /etc/sysconfig
            fi
            echo "--------------------------"
            echo "menon-aktifkan firewall.."
            if iptables-save > /etc/sysconfig/iptables; then
              if iptables -F; then
                echo "berhasil menon-aktifkan firewall.."
              fi
            fi
            ;;
          "firewalld")
            echo "--------------------------"
            echo "menon-aktifkan firewall.."
            if systemctl stop firewalld; then
              echo "berhasil menon-aktifkan firewall.."
            fi
            ;;
        esac
      fi
      ;;
  esac
}

if [[ $certbot == "" ]]; then
  echo "---------------------------------------------------------------------------------------------------"
  echo "certbot not installed, make sure you have configured ssl using certbot before you using this tool.."
  echo "certbot belum terinstall, pastikan anda sudah pernah mengkonfigurasi/menginstall ssl menggunakan certbot sebelum menggunakan tool ini.."
  echo "exiting.."
  exit 1
fi

if [[ ! $SKIP_CONFIRMATION ]]; then

  $certbot certificates
  echo ""
  echo "---------------------------------------------------------------------------------------------"
  echo "- Make sure you already configured and installed ssl certificate on target host using certbot
  - Check expire time for each host if have multiple virtual host at the same server
  - if each of virtual host have same expire time. it's okay to continue, if not. make sure the difference between expire time at least less than 10 days.
  -----------------------------------------------------------------------------------------------
  - Pastikan anda sudah pernah menginstall dan mengkonfigurasi sertifikat ssl menggunakan certbot
  - Periksa waktu kadaluarsa sertifikat ssl jika lebih dari 1 host
  - jika waktu kadaluarsa antara virtual host sama, maka script akan berjalan lancar. jika tidak. pastikan perbedaan waktu kadaluarsa antara virtual host kurang dari 10 hari.
  "

  while true
  do
    echo    "-----------------------------"
    read -p "Are you sure to continue? (y/n) : " INSTALL
    if [[ $INSTALL != "n" ]]; then
      if [[ $INSTALL != "y" ]]; then
        echo you have to write y or n
      else
        break
      fi
    else
      exit
    fi
  done

fi


echo ""
validDay=$($certbot certificates | grep Expiry | awk 'FNR==1 {print $6}')
echo "----------------------------------------"
echo "Mengecek tanggal expire sertifikat ssl.."
source /etc/otoressl/config

if [[ $validDay < 30 ]] || echo $validDay | grep EXPIRED; then

  send-notify "Renewing certificate.."

  if [[ $TOKEN_BOT_TELEGRAM && $ID_BOT_TELEGRAM != "" ]]; then
      curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=${ID_BOT_TELEGRAM} -d text="NOTIF SSL @$(cat /etc/hostname)

Renewing certificate..
" &>/dev/null &
  fi

  echo "Renewing certificate.."

  stopFirewall;

  if $certbot renew; then

    startFirewall;

    case $OS in
      "Ubuntu")
          case $WEB_SERVER in
            "nginx")
              restartNginx;
              ;;
            "apache")
              restartApache;
              ;;
          esac
        ;;
      *)
          case $WEB_SERVER in
            "nginx")
              restartNginx;
              ;;
            "apache")
              restartApache;
              ;;
          esac
        ;;
    esac
    
    if [[ $RESTART_WEBMIN ]]; then
      systemctl restart webmin
      RESTART_WEBMIN=false
    fi

    send-notify "Success! certificate renewed..
menghitung hari untuk dibuatkan cronjob/automatic renew certificate...
"
    if [[ $TOKEN_BOT_TELEGRAM && $ID_BOT_TELEGRAM != "" ]]; then
       curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=${ID_BOT_TELEGRAM} -d text="NOTIF SSL $(cat /etc/hostname)

Success! certificate renewed..
menghitung hari untuk dibuatkan cronjob/automatic renew certificate...
" &>/dev/null &
    fi

    echo "-----------------------------"
    echo "Success! certificate renewed..
menghitung hari untuk dibuatkan cronjob/automatic renew certificate...
"
  fi
else
  echo "--------------------------------------------------------"
  echo "belum memasuki waktu yang pas untuk renew certificate..."
  echo "menghitung hari untuk dibuatkan cronjob/automatic renew certificate..."
fi

isCrontab=$(which crontab)

if [[ $isCrontab == "" ]]; then
  
  case $OS in
    "Arch")
      if sudo pacman -Syyy cronie; then
        if ! systemctl enable --now cronie; then
          echo "---------------------------------"
          echo "cronjob service failed to start.."
          echo "exiting.."
          exit 1
        fi
      else
        echo "--------------------------------------------------------------------------------------------"
        echo "Cannot install cronjob package, please install manual cronjob package and rerun this scripts"
        echo "exiting.."
        exit 1
      fi
      ;;
    "Ubuntu")
      if apt-get update && apt-get install cron; then
        if ! systemctl enable --now cron; then
          echo "---------------------------------"
          echo "cronjob service failed to start.."
          echo "exiting.."
          exit 1
        fi
      else
        echo "--------------------------------------------------------------------------------------------"
        echo "Cannot install cronjob package, please install manual cronjob package and rerun this scripts"
        echo "exiting.."
        exit 1
      fi
      ;;
    "CentOS")
      if yum update && yum install crond; then
        if ! systemctl enable --now crond; then
          echo "---------------------------------"
          echo "cronjob service failed to start.."
          echo "exiting.."
          exit 1
        fi
      else
        echo "--------------------------------------------------------------------------------------------"
        echo "Cannot install cronjob package, please install manual cronjob package and rerun this scripts"
        echo "exiting.."
        exit 1
      fi
      ;;
  esac
else
  case $OS in
    "Arch")
      if ! systemctl enable --now cronie; then
        echo "---------------------------------"
        echo "cronjob service failed to start.."
        echo "exiting.."
        exit 1
      fi
      ;;
    "Ubuntu")
      if ! systemctl enable --now cron; then
        echo "---------------------------------"
        echo "cronjob service failed to start.."
        echo "exiting.."
        exit 1
      fi
      ;;
    "CentOS")
      if ! systemctl enable --now crond; then
        echo "---------------------------------"
        echo "cronjob service failed to start.."
        echo "exiting.."
        exit 1
      fi
      ;;
  esac
fi

crontab -l | sed 's/.*otoressl.*//' | crontab -
crontab -l | sed '/^$/d'| crontab -

renewDay="$(($validDay - 10))"

month=$(date --date="+$renewDay days" +%-m)
day=$(date --date="+$renewDay days" +%-d)

case $WEB_SERVER in
  "nginx")
      if [[ $FIREWALL != "" ]]; then
        case $FIREWALL in
          "iptables")
            if [[ $RESTART_WEBMIN ]]; then
              { crontab -l; echo "0 9 $day $month * $(which otoressl) nginx -y --disable-firewall iptables --restart-webmin"; } | crontab -
              else
              { crontab -l; echo "0 9 $day $month * $(which otoressl) nginx -y --disable-firewall iptables"; } | crontab -
            fi
            ;;
          "firewalld")
            if [[ $RESTART_WEBMIN ]]; then
              { crontab -l; echo "0 9 $day $month * $(which otoressl) nginx -y --disable-firewall firewalld --restart-webmin"; } | crontab -
            else
              { crontab -l; echo "0 9 $day $month * $(which otoressl) nginx -y --disable-firewall firewalld"; } | crontab -
            fi
            ;;
        esac
      else
        if [[ $RESTART_WEBMIN ]]; then
          { crontab -l; echo "0 9 $day $month * $(which otoressl) nginx -y --restart-webmin"; } | crontab -
        else
          { crontab -l; echo "0 9 $day $month * $(which otoressl) nginx -y"; } | crontab -
        fi
      fi
    ;;
  "apache")
      if [[ $FIREWALL != "" ]]; then
        case $FIREWALL in
          "iptables")
            if [[ $RESTART_WEBMIN ]]; then
              { crontab -l; echo "0 9 $day $month * $(which otoressl) apache -y --disable-firewall iptables --restart-webmin"; } | crontab -
              else
              { crontab -l; echo "0 9 $day $month * $(which otoressl) apache -y --disable-firewall iptables"; } | crontab -
            fi
            ;;
          "firewalld")
            if [[ $RESTART_WEBMIN ]]; then
              { crontab -l; echo "0 9 $day $month * $(which otoressl) apache -y --disable-firewall firewalld --restart-webmin"; } | crontab -
            else
              { crontab -l; echo "0 9 $day $month * $(which otoressl) apache -y --disable-firewall firewalld"; } | crontab -
            fi
            ;;
        esac
      else
        if [[ $RESTART_WEBMIN ]]; then
          { crontab -l; echo "0 9 $day $month * $(which otoressl) apache -y --restart-webmin"; } | crontab -
        else
          { crontab -l; echo "0 9 $day $month * $(which otoressl) apache -y"; } | crontab -
        fi
      fi
    ;;
esac

send-notify "berhasil membuat cronjob untuk otomisasi renew certificate.."
if [[ $TOKEN_BOT_TELEGRAM && $ID_BOT_TELEGRAM != "" ]]; then
     curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=${ID_BOT_TELEGRAM} -d text="NOTIF SSL $(cat /etc/hostname)

berhasil membuat cronjob untuk otomisasi renew certificate..
" &>/dev/null &
fi
echo "------------------------------------------------------------"
echo "berhasil membuat cronjob untuk otomisasi renew certificate.."
echo "------------"
echo "Cronjob List"
echo ""
crontab -l
