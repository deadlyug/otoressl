#!/bin/bash
# Change directory to directory of the script

PARAMS=""
while (( "$#" )); do
  case "$1" in
    nginx)
      WEB_SERVER="nginx"
      shift
      ;;
    apache)
      WEB_SERVER="apache"
      shift
      ;;
    -f|--disable-firewall)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        FIREWALL=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -v|--version)
      echo "otoressl version 1.3-beta"
      exit 0
      ;;
    -a|--ors-all)
      ORS_ALL=true
      shift
      ;;
    -s|--ors-single)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        DOMAIN_NAME=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -t|--trigger-script)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        SCRIPT_PATH=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -w|--restart-webmin)
      RESTART_WEBMIN=true
      shift 
      ;;
    -y)
      SKIP_CONFIRMATION=true
      shift 
      ;;
    -h | --help ) 
         echo "Usage: otoressl <web-server> [OPTIONS]"
         echo "WEB-SERVER includes: "
         echo "   nginx   - if server use nginx"
         echo "   apache  - if server use apache"
         echo "OPTION includes:"
         echo "   -a | --ors-all - renew all"
         echo "   -f | --disable-firewall - insert firewall tools to disable"
         echo "   -h | --help - displays this message"
         echo "   ARGUMENT includes:"
         echo "       iptables - if server use iptables"
         echo "       firewalld - if server use firewalld"
         echo "   -s | --ors-single - single renew"
         echo "   -t | --trigger-script - trigger a script after successfull renew, you mush supply absolute script path"
         echo "                           example: --trigger-script /path/to/script"
         echo "   -v - show otoressl version"
         echo "   -w | --restart-webmin - restart webmin after renew"
         echo "   -y - skip confirmation"
         exit 0
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    * ) 
         echo "-----"
         echo "Error"
         echo "Invalid <web-server>: $1"
         echo "you must specify web server service to tell script to auto restart web server that you have been chosen.."
         echo "--------------------------------------"
         echo "Usage: otoressl <web-server> [OPTIONS]"
         echo "example: ./otoressl nginx or ./otoressl apache [OPTIONS]"
         echo "WEB-SERVER includes: "
         echo "   nginx   - if server use nginx"
         echo "   apache  - if server use apache"
         echo "OPTION includes:"
         echo "   -a | --ors-all - renew all"
         echo "   -f | --disable-firewall - insert firewall tools to disable"
         echo "   -h | --help - displays this message"
         echo "   ARGUMENT includes:"
         echo "       iptables - if server use iptables"
         echo "       firewalld - if server use firewalld"
         echo "   -s | --ors-single - single renew"
         echo "   -t | --trigger-script - trigger a script after successfull renew, you mush supply absolute script path"
         echo "                           example: --trigger-script /path/to/script"
         echo "   -v - show otoressl version"
         echo "   -w | --restart-webmin - restart webmin after renew"
         echo "   -y - skip confirmation"
         exit 1
     ;;
    # *) # preserve positional arguments
    #   PARAMS="$PARAMS $1"
    #   shift
    #   ;;
  esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

# cd to script directory
cd "$(dirname "$0")"

function initSystem(){
  action=$1
  app=$2
  isSystemctl=$(which systemctl)
  if [[ $isSystemctl != "" ]]; then 
    systemctl $action $app; 
  else
    service $app $action;
  fi
}

OS=$(if ! hostnamectl | grep "Operating System" | awk '{print $3}'; then cat /etc/*release | grep NAME= | awk 'FNR==1 {print $1}' | sed 's/NAME="//'; fi)
certbot=$(if ! which certbot; then which certbot-auto; fi )

if [[ $WEB_SERVER != "nginx" ]]; then
  if [[ $WEB_SERVER != "apache" ]]; then
    echo "-----"
    echo "Error"
    echo "you must specify web server service to tell script to auto restart web server that you have been chosen.."
    echo "--------------------------------------"
    echo "Usage: otoressl <web-server> [OPTIONS]"
    echo "example: ./otoressl nginx or ./otoressl apache [OPTIONS]"
    echo "WEB-SERVER includes: "
    echo "   nginx   - if server use nginx"
    echo "   apache  - if server use apache"
    echo "OPTION includes:"
    echo "   -a | --ors-all - renew all"
    echo "   -f | --disable-firewall - insert firewall tools to disable"
    echo "   -h | --help - displays this message"
    echo "   ARGUMENT includes:"
    echo "       iptables - if server use iptables"
    echo "       firewalld - if server use firewalld"
    echo "   -s | --ors-single - single renew"
    echo "   -t | --trigger-script - trigger a script after successfull renew, you mush supply absolute script path"
    echo "                           example: --trigger-script /path/to/script"
    echo "   -v - show otoressl version"
    echo "   -w | --restart-webmin - restart webmin after renew"
    echo "   -y - skip confirmation"
    exit 1
  fi
fi

function restartNginx() {
  if ! initSystem restart nginx; then
    echo "-------------------------"
    echo "Failed to restart nginx.."
    echo "Maybe apache is running and use the same port with nginx"
    echo "Try to stop apache.."
    if initSystem status httpd; then
      if initSystem stop httpd; then
        if ! initSystem restart nginx; then
          "apache has been stop but nginx still cannot start, maybe something were wrong with nginx configuration.. "
          if initSystem start httpd; then
            "Success restart apache.."
          fi
          exit 1
        fi
      fi
    else
      "cannot stop apache, maybe the service already stop. it makes maybe there's a error with you nginx configuration.."
    fi
  else
    echo "Success restart nginx.."
  fi
}
function restartNginxUbuntu() {
  if ! initSystem restart nginx; then
    echo "-------------------------"
    echo "Failed to restart nginx.."
    echo "Maybe apache is running and use the same port with nginx"
    echo "Try to stop apache.."
    if initSystem status apache2; then
      if initSystem stop apache2; then
        if ! initSystem restart nginx; then
          "apache has been stop but nginx still cannot start, maybe something were wrong with nginx configuration.. "
          if initSystem start apache2; then
            "Success restart apache.."
          fi
          exit 1
        fi
      fi
     else
    "cannot stop apache, maybe the service already stop. it makes maybe there's a error with you nginx configuration.."
    fi
  else
    echo "Success restart nginx.."
  fi
}
function restartApache() {
  if ! initSystem restart httpd; then
    echo "----"
    echo "Failed to restart apache.."
    echo "Maybe nginx is running and use the same port with apache"
    echo "Try to stop nginx.."
    if initSystem status nginx; then
      if initSystem stop nginx; then
        if ! initSystem restart httpd; then
          "nginx has been stop but apache still cannot start, maybe something were wrong with apache configuration.. "
          if initSystem start nginx; then
            "Success restart nginx.."
          fi
          exit 1
        fi
      fi
     else
    "cannot stop nginx, maybe the service already stop. it makes maybe there's a error with you apache configuration.."
    fi
  else
    echo "Success restart apache.."
  fi
}
function restartApacheUbuntu() {
  if ! initSystem restart apache2; then
    echo "----"
    echo "Failed to restart apache.."
    echo "Maybe nginx is running and use the same port with apache"
    echo "Try to stop nginx.."
    if initSystem status nginx; then
      if initSystem stop nginx; then
        if ! initSystem restart apache2; then
          "nginx has been stop but apache still cannot start, maybe something were wrong with apache configuration.. "
          if initSystem start nginx; then
            "Success restart nginx.."
          fi
          exit 1
        fi
      fi
     else
    "cannot stop nginx, maybe the service already stop. it makes maybe there's a error with you apache configuration.."
    fi
  else
    echo "Success restart apache.."
  fi
}

function startFirewall() {

case $OS in
  "CentOS")
    if [[ $FIREWALL != "" ]]; then
      case $FIREWALL in
        "iptables")
          echo "-------------------------------"
          echo "mengaktifkan kembali firewall.."
          echo "activating firewall.."
          if initSystem start iptables; then
            echo "berhasil mengaktifkan firewall.."
            echo "firewall activated.."
          fi
          ;;
        "firewalld")
          echo "-------------------------------"
          echo "mengaktifkan kembali firewall.."
          echo "activating firewall.."
          if initSystem start firewalld; then
            echo "berhasil mengaktifkan firewall.."
            echo "firewall activated.."
          fi
          ;;
      esac
    fi
    ;;
  *)
    if [[ $FIREWALL != "" ]]; then
      case $FIREWALL in
        "iptables")
          echo "------------------------"
          echo "mengaktifkan firewall.."
          echo "activating firewall.."
          if iptables-restore < /etc/sysconfig/iptables; then
            echo "berhasil mengaktifkan firewall.."
            echo "firewall activated.."
          fi
          ;;
        "firewalld")
          echo "------------------------"
          echo "mengaktifkan firewall.."
          echo "activating firewall.."
          if initSystem start firewalld; then
            echo "berhasil mengaktifkan firewall.."
            echo "firewall activated.."
          fi
          ;;
      esac
    fi
    ;;
esac

}

function stopFirewall() {
  case $OS in
    "CentOS")
      if [[ $FIREWALL != "" ]]; then
        case $FIREWALL in
          "iptables")
            echo "-------------------------"
            echo "menon-aktifkan firewall.."
            echo "deactivating firewall.."
            if initSystem stop iptables; then
              echo "berhasil menon-aktifkan firewall.."
              echo "firewall deactivated.."
            fi
            ;;
          "firewalld")
            echo "-------------------------"
            echo "menon-aktifkan firewall.."
            echo "deactivating firewall.."
            if initSystem stop firewalld; then
              echo "berhasil menon-aktifkan firewall.."
              echo "firewall deactivated.."
            fi
            ;;
        esac
      fi
      ;;
    *)
      if [[ $FIREWALL != "" ]]; then
        case $FIREWALL in
          "iptables")
            if [[ ! -d /etc/sysconfig ]]; then
              mkdir /etc/sysconfig
            fi
            echo "-------------------------"
            echo "menon-aktifkan firewall.."
            echo "deactivating firewall.."
            if iptables-save > /etc/sysconfig/iptables; then
              if iptables -F; then
                echo "berhasil menon-aktifkan firewall.."
                echo "firewall deactivated.."
              fi
            fi
            ;;
          "firewalld")
            echo "-------------------------"
            echo "menon-aktifkan firewall.."
            echo "deactivating firewall.."
            if initSystem stop firewalld; then
              echo "berhasil menon-aktifkan firewall.."
              echo "firewall deactivated.."
            fi
            ;;
        esac
      fi
      ;;
  esac
}

function checkValidDay() {
  if [[ $validDay == "" ]]; then
    echo "------"
    echo "ERROR!"
    echo "Expiry date not valid or Domain $DOMAIN_NAME not found.."
    send-notify "ERROR!
Expiry date not valid or Domain $DOMAIN_NAME not found..
"
    if [[ $TOKEN_BOT_TELEGRAM && $ID_BOT_TELEGRAM != "" ]]; then
      curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=${ID_BOT_TELEGRAM} -d text="NOTIF SSL @$(cat /etc/hostname)

      Expiry date not valid or Domain $DOMAIN_NAME not found..
      "
    fi
    exit 1
  fi

  getLastCharacterValidDay=$(echo ${validDay: -1})
  if [[ $getLastCharacterValidDay == ")" ]]; then
    validDay=$(echo $validDay | sed 's/.$//')
  fi

  if [[ $validDay == "EXPIRED" ]] || echo $validDay | egrep -e "^[0-9]*$" > /tmp/otoressl-output; then
    echo "-------------------"
    echo "Expiry date valid.."
  else
    echo "------"
    echo "ERROR!"
    echo "Expiry date not valid.."
    echo "Expiry date: $validDay"

    send-notify "ERROR!
Expiry date not valid..
Expiry date: $validDay
    "
    if [[ $TOKEN_BOT_TELEGRAM && $ID_BOT_TELEGRAM != "" ]]; then
    curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=${ID_BOT_TELEGRAM} -d text="NOTIF SSL @$(cat /etc/hostname)

ERROR!
Expiry date not valid..
Expiry date: $validDay
" &>/dev/null &
    fi
    exit 1
  fi
}

function getValidDay() {
  echo ""
  if [[ $DOMAIN_NAME == "" ]]; then
    validDay=$($certbot certificates | grep Expiry | awk 'FNR==1 {print $6}')
  else
    validDay=$($certbot certificates | grep -A 3 $DOMAIN_NAME | head -3)
    if echo $validDay | grep -q "Serial" && echo $validDay | grep -q "Key"; then
      validDay=$($certbot certificates | grep -A 5 $DOMAIN_NAME | head -5)
      echo $validDay | awk '{print $17}' > /tmp/otoressl-output
    elif echo $validday | grep -q "serial"; then
      validday=$($certbot certificates | grep -a 4 $domain_name | head -4)
      echo $validDay | awk '{print $14}' > /tmp/otoressl-output
    else
      echo $validDay | awk '{print $11}' > /tmp/otoressl-output
    fi
    validDay=$(cat /tmp/otoressl-output )
  fi
  checkValidDay;
}

# RENEW-SECTION
if [[ $SCRIPT_PATH != "" ]]; then
  getFirstCharacter=$(echo ${SCRIPT_PATH:0:1})
  if [[ $getFirstCharacter != "/" ]]; then
    echo "------"
    echo "Error!"
    echo "$SCRIPT_PATH script is not absolute path.."
    exit 1
  else
    if [[ ! -f $SCRIPT_PATH ]]; then
      echo "------"
      echo "Error!"
      echo "Cannot find $SCRIPT_PATH script.."
      exit 1
    fi
  fi
fi

getValidDay;

if [[ $certbot == "" ]]; then
  echo "---------------------------------------------------------------------------------------------------"
  echo "certbot not installed, make sure you have configured ssl using certbot before you using this tool.."
  echo "certbot belum terinstall, pastikan anda sudah pernah mengkonfigurasi/menginstall ssl menggunakan certbot sebelum menggunakan tool ini.."
  echo "exiting.."
  exit 1
fi

if [[ ! $SKIP_CONFIRMATION ]]; then

  if [[ $DOMAIN_NAME == "" ]]; then
    $certbot certificates
  else
    $certbot certificates | grep -A 3 $DOMAIN_NAME | head -3
  fi
  echo ""
  echo "  ---------------------------------------------------------------------------------------------"
  echo "  - Make sure you already configured and installed ssl certificate on target host using certbot
  -----------------------------------------------------------------------------------------------
  - Pastikan anda sudah pernah menginstall dan mengkonfigurasi sertifikat ssl menggunakan certbot"

  while true
  do
    echo ""
    echo    "--------------------------------"
    read -p "Are you sure to continue? (y/n) : " INSTALL
    if [[ $INSTALL != "n" ]]; then
      if [[ $INSTALL != "y" ]]; then
        echo you have to write y or n
      else
        break
      fi
    else
      exit
    fi
  done

fi

echo "----------------------------------------"
echo "Mengecek tanggal expire sertifikat ssl.."
echo "Checking ssl certificate expire time.."
source /etc/otoressl/config

if [[ $validDay < 30 ]] || echo $validDay | grep EXPIRED; then

  send-notify "Renewing certificate.."

  if [[ $TOKEN_BOT_TELEGRAM && $ID_BOT_TELEGRAM != "" ]]; then
      curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=${ID_BOT_TELEGRAM} -d text="NOTIF SSL @$(cat /etc/hostname)

Renewing certificate..
" &>/dev/null &
  fi

  echo "Renewing certificate.."

  stopFirewall;

  if [[ $DOMAIN_NAME != "" ]]; then
    renewcert="$certbot renew --cert-name $DOMAIN_NAME"
  else
    renewcert="$certbot renew"
  fi

  if $renewcert; then

    getValidDay;

    startFirewall;

    case $OS in
      "Ubuntu")
          case $WEB_SERVER in
            "nginx")
              restartNginxUbuntu;
              ;;
            "apache")
              restartApacheUbuntu;
              ;;
          esac
        ;;
      *)
          case $WEB_SERVER in
            "nginx")
              restartNginx;
              ;;
            "apache")
              restartApache;
              ;;
          esac
        ;;
    esac

    if [[ $SCRIPT_PATH != "" ]]; then
      if [[ -f $SCRIPT_PATH ]]; then
        bash $SCRIPT_PATH;
      fi
    fi
    
    if [[ $RESTART_WEBMIN ]]; then
      initSystem restart webmin
      RESTART_WEBMIN=false
    fi

    send-notify "SUCCESS! 
certificate renewed..
menghitung hari untuk dibuatkan cronjob/automatic renew certificate...
"
    if [[ $TOKEN_BOT_TELEGRAM && $ID_BOT_TELEGRAM != "" ]]; then
       curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=${ID_BOT_TELEGRAM} -d text="NOTIF SSL $(cat /etc/hostname)

SUCCESS! 
certificate renewed..
counting day to create a cron job for certificate renewal..
" &>/dev/null &
    fi

    echo "------------------------------"
    echo "SUCCESS! certificate renewed..
counting day to create a cron job for certificate renewal.."
  else 
    send-notify "FAILED!
certificate not renewed..
"
    if [[ $TOKEN_BOT_TELEGRAM && $ID_BOT_TELEGRAM != "" ]]; then
       curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=${ID_BOT_TELEGRAM} -d text="NOTIF SSL $(cat /etc/hostname)

FAILED!
certificate not renewed..
" &>/dev/null &
    fi

    startFirewall;

    echo "---------------------------------"
    echo "FAILED! certificate not renewed.."
    exit 1
  fi

else
  echo "--------------------------------------------------------"
  echo "belum memasuki waktu yang pas untuk renew certificate..."
  echo "menghitung hari untuk dibuatkan cronjob/automatic renew certificate..."
  echo "--------------------------------------------------------"
  echo "it's not the right time to renew the certificate.."
  echo "counting day to create a cron job for certificate renewal.."
fi

isCrontab=$(which crontab)

if [[ $isCrontab == "" ]]; then
  
  case $OS in
    "Arch")
      if sudo pacman -Syyy cronie; then
        if ! systemctl enable --now cronie; then
          echo "---------------------------------"
          echo "cronjob service failed to start.."
          echo "exiting.."
          exit 1
        fi
      else
        echo "--------------------------------------------------------------------------------------------"
        echo "Cannot install cronjob package, please install manual cronjob package and rerun this scripts"
        echo "exiting.."
        exit 1
      fi
      ;;
    "Ubuntu")
      if apt-get update -y && apt-get install cron -y; then
        if ! systemctl enable --now cron; then
          echo "---------------------------------"
          echo "cronjob service failed to start.."
          echo "exiting.."
          exit 1
        fi
      else
        echo "--------------------------------------------------------------------------------------------"
        echo "Cannot install cronjob package, please install manual cronjob package and rerun this scripts"
        echo "exiting.."
        exit 1
      fi
      ;;
    "CentOS")
      if yum update -y && yum install cronie -y; then
        if ! systemctl enable --now crond; then
          echo "---------------------------------"
          echo "cronjob service failed to start.."
          echo "exiting.."
          exit 1
        fi
      else
        echo "--------------------------------------------------------------------------------------------"
        echo "Cannot install cronjob package, please install manual cronjob package and rerun this scripts"
        echo "exiting.."
        exit 1
      fi
      ;;
    *)
      if ! yum update -y && yum install cronie -y; then
        if ! apt-get update -y && apt-get install cron; then
          apt update -y && apt install cron
        fi
      fi
      init start crond
      ;;
  esac
else
  case $OS in
    "Arch")
      if ! systemctl enable --now cronie; then
        echo "---------------------------------"
        echo "cronjob service failed to start.."
        echo "exiting.."
        exit 1
      fi
      ;;
    "Ubuntu")
      if ! systemctl enable --now cron; then
        echo "---------------------------------"
        echo "cronjob service failed to start.."
        echo "exiting.."
        exit 1
      fi
      ;; "CentOS")
      if ! systemctl enable --now crond; then
        echo "---------------------------------"
        echo "cronjob service failed to start.."
        echo "exiting.."
        exit 1
      fi
      ;;
    *)
      if ! initSystem start crond; then
        echo "---------------------------------"
        echo "cronjob service failed to start.."
        echo "exiting.."
        exit 1
      fi
      ;;
  esac
fi

if [[ $DOMAIN_NAME == "" ]]; then
  crontab -l | sed 's/.*--ors-all.*//' | crontab -
  crontab -l | sed '/^$/d'| crontab -
else
  crontab -l | sed 's/.*--ors-single '$DOMAIN_NAME'.*//' | crontab -
  crontab -l | sed '/^$/d'| crontab -
fi

renewDay="$(($validDay - 10))"

month=$(date --date="+$renewDay days" +%-m)
day=$(date --date="+$renewDay days" +%-d)

function cronjob() {
  function cronFirewall() {
    if [[ $RESTART_WEBMIN ]]; then
        if [[ $DOMAIN_NAME != "" ]]; then
            if [[ $SCRIPT_PATH != "" ]]; then
              { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --disable-firewall $1 --restart-webmin --ors-single $DOMAIN_NAME" --trigger-script $SCRIPT_PATH; } | crontab -
              else
              { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --disable-firewall $1 --restart-webmin --ors-single $DOMAIN_NAME"; } | crontab -
            fi
         else
            if [[ $SCRIPT_PATH != "" ]]; then
              { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --disable-firewall $1 --restart-webmin --ors-all" --trigger-script $SCRIPT_PATH; } | crontab -
              else
              { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --disable-firewall $1 --restart-webmin --ors-all"; } | crontab -
            fi
        fi
    else
      if [[ $DOMAIN_NAME != "" ]]; then
        if [[ $SCRIPT_PATH != "" ]]; then
          { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --disable-firewall $1 --ors-single $DOMAIN_NAME"; } | crontab -
        else
          { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --disable-firewall $1 --ors-single $DOMAIN_NAME"; } | crontab -
        fi
      else
        if [[ $SCRIPT_PATH != "" ]]; then
          { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --disable-firewall $1 --ors-all --trigger-script $SCRIPT_PATH"; } | crontab -
        else
          { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --disable-firewall $1 --ors-all"; } | crontab -
        fi
      fi
    fi
  }
  if [[ $FIREWALL != "" ]]; then
    case $FIREWALL in
      "iptables")
        cronFirewall "iptables";
        ;;
      "firewalld")
        cronFirewall "firewalld";
        ;;
    esac
  else
    if [[ $RESTART_WEBMIN ]]; then
      if [[ $DOMAIN_NAME != "" ]]; then
          if [[ $SCRIPT_PATH != "" ]]; then
            { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --restart-webmin --ors-single $DOMAIN_NAME" --trigger-script $SCRIPT_PATH; } | crontab -
            else
            { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --restart-webmin --ors-single $DOMAIN_NAME"; } | crontab -
          fi
        else
          if [[ $SCRIPT_PATH != "" ]]; then
            { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --restart-webmin --ors-all --trigger-script $SCRIPT_PATH"; } | crontab -
            else
            { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --restart-webmin --ors-all"; } | crontab -
          fi
      fi
      else
        if [[ $DOMAIN_NAME != "" ]]; then
            if [[ $SCRIPT_PATH != "" ]]; then
              { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --ors-single $DOMAIN_NAME --trigger-script $SCRIPT_PATH"; } | crontab -
            else
              { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --ors-single $DOMAIN_NAME"; } | crontab -
            fi
          else
            if [[ $SCRIPT_PATH != "" ]]; then
              { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --ors-all --trigger-script $SCRIPT_PATH"; } | crontab -
            else
              { crontab -l; echo "0 9 $day $month * $(which otoressl) $SERVER_PROVIDER -y --ors-all"; } | crontab -
            fi
        fi
    fi
  fi
}

case $WEB_SERVER in
  "nginx")
      SERVER_PROVIDER="nginx"
      cronjob;
    ;;
  "apache")
      SERVER_PROVIDER="apache"
      cronjob;
    ;;
esac

send-notify "berhasil membuat cronjob untuk otomasi renew certificate.."
if [[ $TOKEN_BOT_TELEGRAM && $ID_BOT_TELEGRAM != "" ]]; then
     curl -s -X POST https://api.telegram.org/bot${TOKEN_BOT_TELEGRAM}/sendMessage -d chat_id=${ID_BOT_TELEGRAM} -d text="NOTIF SSL $(cat /etc/hostname)

berhasil membuat cronjob untuk otomasi renew certificate..
success create cronjob for automatic renew certificate..
" &>/dev/null &
fi
echo "------------------------------------------------------------"
echo "berhasil membuat cronjob untuk otomasi renew certificate.."
echo "success create cronjob for automatic renew certificate.."
echo "------------"
echo "Cronjob List"
echo ""
crontab -l
echo ""
echo "------"
echo "FINISH"
echo "------"
